#!/bin/bash

set -e

vm_name="$2"
if [ "$vm_name" = "" ]; then
    vm_name="sys-whonix"
fi

dom0_check_dependencies() {
   ## Packaging should make sure these packages are installed in dom0 before proceeding.
   #sudo qubes-dom0-update torsocks socat openssh-server x2goserver

   command -v torsocks >/dev/null || { echo "ERROR: missing torsocks" >&2 ; exit 101; };
   command -v socat >/dev/null || { echo "ERROR: missing socat" >&2 ; exit 102; };
   command -v sshd >/dev/null || { echo "ERROR: missing sshd" >&2 ; exit 103; };

   ## x2goserver is optional.
}

no_root_check() {
    if [ "$(id -u)" = "0" ]; then
        echo "ERROR: Do not run $0 as root / with sudo!" >&2
        exit 100
    fi
}

dom0_copy_from_vm() {
    qvm-run --user root --pass-io "$1" "cat $2" > "$3"
}

preparation() {
    temp_dir="$(mktemp --directory)"
    mkdir -p "$temp_dir/keys"
}

colors() {
   if [ "$TERM" = "" ]; then
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
       export alt=$(      tput smcup  || tput ti      ) # Start alt display
       export ealt=$(     tput rmcup  || tput te      ) # End   alt display
       export hide=$(     tput civis  || tput vi      ) # Hide cursor
       export show=$(     tput cnorm  || tput ve      ) # Show cursor
       export save=$(     tput sc                     ) # Save cursor
       export load=$(     tput rc                     ) # Load cursor
       export bold=$(     tput bold   || tput md      ) # Start bold
       export stout=$(    tput smso   || tput so      ) # Start stand-out
       export estout=$(   tput rmso   || tput se      ) # End stand-out
       export under=$(    tput smul   || tput us      ) # Start underline
       export eunder=$(   tput rmul   || tput ue      ) # End   underline
       export reset=$(    tput sgr0   || tput me      ) # Reset cursor
       export blink=$(    tput blink  || tput mb      ) # Start blinking
       export italic=$(   tput sitm   || tput ZH      ) # Start italic
       export eitalic=$(  tput ritm   || tput ZR      ) # End   italic
   [[ $TERM != *-m ]] && {
       export red=$(      tput setaf 1|| tput AF 1    )
       export green=$(    tput setaf 2|| tput AF 2    )
       export yellow=$(   tput setaf 3|| tput AF 3    )
       export blue=$(     tput setaf 4|| tput AF 4    )
       export magenta=$(  tput setaf 5|| tput AF 5    )
       export cyan=$(     tput setaf 6|| tput AF 6    )
   }
       export white=$(    tput setaf 7|| tput AF 7    )
       export default=$(  tput op                     )
       export eed=$(      tput ed     || tput cd      )   # Erase to end of display
       export eel=$(      tput el     || tput ce      )   # Erase to end of line
       export ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
       export ewl=$eel$ebl                                # Erase whole line
       export draw=$(     tput -S <<< '   enacs
                                   smacs
                                   acsc
                                   rmacs' || { \
                   tput eA; tput as;
                   tput ac; tput ae;         } )   # Drawing characters
       export back=$'\b'
   } 2>/dev/null ||:
}

dom0_exit_handler() {
    if [ ! "$socat_pid" = "" ]; then
       kill -s sigterm "$socat_pid" &>/dev/null || true
    fi
}

dom0_run_socat() {
   ## Running this function early to allow socat to be launched into the background.

   ## We could run "sudo killall socat" or "pkill socat" or similar before.
   ## This would be useful to clean up leftover socat processes.
   ## In some race conditions the following might fail due to leftover socat
   ## processes from previous runs. (Socat would write that port is already in
   ## use by another application and GUI would detect that as error since
   ## written to stderr.)

   ## By Qubes default, dom0 is non-networked.
   ## Use socat in combination with torsocks to allow running wormhole directly
   ## from Qubes dom0. This is to make VMs untrusted. I.e. a compromised VM
   ## should not get access to dom0 SSH server keys.
   ## In other words, allow running "torsocks wormhole" in dom0.
   ## (As executed by qubes-remote-support-receiver-wormhole-helper.)
   ##
   ## Listen with socat on port 9050 (this is where Tor would listen if this was not dom0).
   ## torsocks with its default configuration will use port 9050.
   ##
   ## We could use any dom0 port other than 9050.
   ## For that we would have to use something like this:
   ## TORSOCKS_CONF_FILE=/path/to/qubes-remote-support-torsocks-config torsocks
   ## But since nothing should be listening on port 9050 in dom0 the choice of
   ## this port is appropriate at a small expense of breakage if Tor was
   ## installed in dom0 with default configuration which really should not be
   ## the case in dom0.
   ##
   ## Port number 9122 is an arbitrarily chosen unused Tor SocksPort inside Whonix-Gateway.
   socat TCP-LISTEN:9050,reuseaddr,fork "EXEC:qrexec-client -d $vm_name user\:\'\''/etc/qubes-rpc/qubes.ConnectTCP 9122\'\''" &
   socat_pid="$!"

   ## socat TCP-LISTEN:9050,reuseaddr,fork 'EXEC:qrexec-client -d sys-whonix user\:\'\''/etc/qubes-rpc/qubes.ConnectTCP 9122\'\'''

   ## Make sure socat is really started. Otherwise if script exits early,
   ## dom0_exit_handler might not have a chance killing socat. And leftover
   ## socat process could break subsequent run of this script.
   sleep 2
}

dom0_rpc_policy_setup() {
    local append_string

    if ! test -d /etc/qubes-rpc/policy ; then
        sudo mkdir -p /etc/qubes-rpc/policy
    fi

    if ! test -f /etc/qubes-rpc/policy/qubes.ConnectTCP+22 ; then
        sudo touch /etc/qubes-rpc/policy/qubes.ConnectTCP+22
    fi

    test -r /etc/qubes-rpc/policy/qubes.ConnectTCP+22

    append_string="$vm_name dom0 allow,target=dom0"
    if grep --quiet "$append_string" /etc/qubes-rpc/policy/qubes.ConnectTCP+22 ; then
        true "INFO: /etc/qubes-rpc/policy/qubes.ConnectTCP+22 added modified."
    else
        echo "$append_string" | sudo tee --append /etc/qubes-rpc/policy/qubes.ConnectTCP+22 >/dev/null
    fi

    ## Debugging.
    #cat /etc/qubes-rpc/policy/qubes.ConnectTCP+22
}

dom0_sshd_hardening() {
    local old new file_name
    if ! test -e /etc/ssh/sshd_config ; then
        echo "ERROR: file /etc/ssh/sshd_config does not exist!" >&2
        exit 1
    fi
    ## dom0 minimal sshd configuration hardening
    old="PasswordAuthentication yes"
    new="PasswordAuthentication no"
    file_name="/etc/ssh/sshd_config"
    sudo sed -i "s/$old/$new/g" "$file_name"
}

check_vm_installed() {
    qvm-check "$vm_name" 2>/dev/null
}

start_vm() {
    if qvm-check --running "$vm_name" 2>/dev/null ; then
        true "INFO: already running, ok."
    else
        ## Would exit non-zero if already running.
        true "INFO: Not yet running, starting..."
        qvm-start "$vm_name" 2>/dev/null
    fi
}

vm_setup() {
    ## --pass-io is optional but useful for gathering debug output.

    qvm-run --user root --pass-io "$vm_name" "systemctl start tor" >/dev/null

    qvm-run --user root --pass-io "$vm_name" "systemctl restart qubes-whonix-remote-support.service" >/dev/null

    qvm-run --user root --pass-io "$vm_name" "systemctl --no-pager --no-block status qubes-whonix-remote-support.service" >/dev/null

    qvm-run --user root --pass-io "$vm_name" "virtport=22 hsport=22 hsname=remote_support client=1 anon-auth-autogen" >/dev/null
}

dom0_get_tor_auth_private() {
    dom0_copy_from_vm "$vm_name" /var/lib/tor_autogen/remote_support/1.auth_private "$temp_dir/keys/1.auth_private"

    ## Debugging.
    #cat "$temp_dir/keys/1.auth_private"

    dom0_copy_from_vm "$vm_name" /var/lib/tor/remote_support/hostname "$temp_dir/keys/hostname"

    ## Debugging.
    #cat "$temp_dir/keys/hostname"
}

dom0_sshd_setup() {
    local append_string
    local one two three
    local ssh_keyscan_output ssh_algorithm ssh_fingerprint

    ## Generate SSH private key in dom0 of remote-support-receiver.
    ## untrusted sys-whonix: Goal is sys-whonix to never have access to SSH private key.
    ## - '-N ""' key without passphrase.
    ## Creates files:
    ## - $temp_dir/keys/id_ed25519
    ## - $temp_dir/keys/id_ed25519.pub
    ssh-keygen -t ed25519 -f "$temp_dir/keys/id_ed25519" -N "" -C "qubes-remote-support-receiver-auto-generated" >/dev/null

    mkdir -p ~/.ssh
    sudo chmod 700 ~/.ssh
    touch ~/.ssh/authorized_keys
    sudo chmod 600 ~/.ssh/*

    append_string="$(cat "$temp_dir/keys/id_ed25519.pub")"
    echo "$append_string" | tee --append ~/.ssh/authorized_keys >/dev/null

    ## systemctl enable not required.
    sudo systemctl restart sshd.service >/dev/null
    sudo systemctl --no-pager --no-block status sshd.service >/dev/null
}

dom0_sshd_fingerprint() {
    ## 2>/dev/null to hide stderr "# 127.0.0.1:22 SSH-2.0-OpenSSH_7.4"
    ssh_keyscan_output="$(ssh-keyscan -t ed25519 -H 127.0.0.1 2>/dev/null)"
    ## example output stderr:
    ## # 127.0.0.1:22 SSH-2.0-OpenSSH_7.4
    ## example output stdout:
    ## |1|5kanhyz0x+i5x+8OE2uEEOFNhi4=|ewEL3Cc3nu9XzMfzb3knbgwxp7Q= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJgOxh9EHKZc7JPKSkkoRjrfqBCWRXZQeeP3mll8yZw1
    ##
    ## the format is
    ## hashed-hostname algorithm fingerprint
    ##
    ## We cannot use the hashed hostname as dom0 is "unaware" of its onion hostname.
    ## dom0 cannot reach the onion hostname using ssh ssh-keyscan.
    ## And if that was possible, it should not. Fingerprint should be securely obtained from localhost.
    read -r one two three <<< "$ssh_keyscan_output" || { echo "parsing error in ssh_keyscan_output: '$ssh_keyscan_output'" >&2 ; true ;};

    ssh_algorithm="$two"
    ssh_fingerprint="$three"

    echo "$ssh_algorithm" | tee "$temp_dir/keys/ssh_algorithm" >/dev/null
    echo "$ssh_fingerprint" | tee "$temp_dir/keys/ssh_fingerprint" >/dev/null

    ## output of ssh-keygen not suitable to be added to ~/.ssh/known_hosts
    ## on remote-support-provider.
    #ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
    ## Example output:
    ## 256 SHA256:ope57TCAoeTn4+ORmL21Hq50Uy9244M9VK2LEK0nJQ0 no comment (ECDSA)
    ##
    ## Could not figure out to use this with known_hosts file.

    ## Debugging.
    #cat "$temp_dir/keys/ssh_algorithm"
    #cat "$temp_dir/keys/ssh_fingerprint"
}

dom0_x2go_setup() {
    sudo x2godbadmin --createdb >/dev/null
    ## systemctl enable not required.
    #sudo systemctl enable x2gocleansessions.service >/dev/null
    sudo systemctl restart x2gocleansessions.service >/dev/null
    sudo systemctl --no-pager --no-block status x2gocleansessions.service >/dev/null
}

dom0_create_key_files_archive() {
    tar -zcvf "$temp_dir/remote-support-keys.tar.gz" -C "$temp_dir" keys >/dev/null
}

wormhole_send_wrapper() {
    test -r "$temp_dir/remote-support-keys.tar.gz"

    local found
    found=no

    while read -r line ; do
        true "INFO: line: $line"
        if [ "$line" = "" ]; then
            ## Shorter xtrace.
            continue
        fi
        read -r first second third _ <<< "$line" || { echo "parsing error in line: '$line'" >&2 ; true ;};
        true "first: $first"
        true "second: $second"
        true "third: $third"
        if [ "$first" = "wormhole" ]; then
            if [ "$second" = "receive" ]; then
                true "${green}${bold}INFO: next line is wormhole code.${reset}"
                echo "wormhole_code: $third"
                found=yes
            fi
        fi

    ## wormhole writes to stderr, hence we must use 2>&1 to redirect to stdout,
    ## so bash's "while read" can access it.
    done < <( qubes-remote-support-receiver-wormhole-helper "$temp_dir/remote-support-keys.tar.gz" 2>&1 )

    if [ "$found" = "no" ]; then
        echo "${red}${bold}ERROR: wormhole issue.${reset}" >&2
    fi
}

no_root_check
dom0_check_dependencies
preparation
colors
trap dom0_exit_handler EXIT
dom0_run_socat
dom0_rpc_policy_setup
dom0_sshd_hardening
check_vm_installed
start_vm
vm_setup
dom0_get_tor_auth_private
dom0_sshd_setup
dom0_sshd_fingerprint
dom0_x2go_setup
dom0_create_key_files_archive
wormhole_send_wrapper

true "INFO: Success."
